@using FurnitureShop.Merchant.Api.Dtos;

<div class="offcanvas offcanvas-end show" tabindex="-1" id="offcanvasAddUser" aria-labelledby="offcanvasAddUserLabel" aria-modal="true" role="dialog">
    <div class="offcanvas-header">
        <h5 id="offcanvasAddUserLabel" class="offcanvas-title">Add Organization</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body mx-0 flex-grow-0">
        <EditForm id="addNewUserForm" Class="mb-3 add-new-user pt-0 fv-plugins-bootstrap5 fv-plugins-framework" Model="@model" OnValidSubmit="OnValidSubmit">
              <DataAnnotationsValidator />
            <div class="mb-3 fv-plugins-icon-container">
                <label class="form-label" for="add-organization-name">Brand name</label>
                <MudTextField class="form-control" id="add-organization-name" placeholder="E.g: Taqsim" @bind-Value="model.Name" For="@(() => model.Name)" />
                <div class="fv-plugins-message-container invalid-feedback"></div>
            </div>
            <div class="mb-3 fv-plugins-icon-container">
                <label class="form-label" for="add-owner">Image path</label>
                <MudTextField class="form-control" id="add-organization-name" placeholder="Images / Organization" @bind-Value="model.ImageUrl" For="@(() => model.ImageUrl)" />
                <div class="fv-plugins-message-container invalid-feedback"></div>
            </div>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" data-bs-dismiss="offcanvas" class="btn btn-primary me-sm-3 me-1 data-submit">Submit</MudButton>
            </MudCardActions>
            <button type="reset" class="btn btn-label-secondary" data-bs-dismiss="offcanvas">Cancel</button>
            <input type="hidden">
        </EditForm>
    </div>
</div>

@code{
    string? error = null;
    CreateOrganizationDto? model = new CreateOrganizationDto();
    private async Task OnValidSubmit(EditContext context)
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri("https://localhost:7113");
        var message = new HttpRequestMessage(HttpMethod.Post, $"/api/Organizations");
        message.Content = JsonContent.Create(model);
        message.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

        var responseMessage = await client.SendAsync(message);
        var status = responseMessage.StatusCode;
        if (status == System.Net.HttpStatusCode.NotFound || status == System.Net.HttpStatusCode.BadRequest)
            error = "10000400";

    }
//7113
}