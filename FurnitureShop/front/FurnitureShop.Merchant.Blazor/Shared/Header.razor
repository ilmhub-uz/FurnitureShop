@using FurnitureShop.Admin.Blazor.ViewModel
@using Newtonsoft.Json

<MudAppBar style="background-color: #1d1d1d;" Fixed="false" Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
    <MudIconButton Style="margin-left:20px;" Href="/" Icon="@Icons.Filled.ShoppingCart" Color="Color.Inherit" />
    
    <MudSpacer />

    @if (@user is null)
    {
        <MudLink Href="/register" Underline="Underline.None" Color="Color.Primary">Register</MudLink>
        <MudButton style="margin: 0 20px;" class="text-decoration-none" Href="/signin" Variant="Variant.Filled" EndIcon="@Icons.Filled.ArrowCircleRight" Color="Color.Primary">Sign in</MudButton>
    }
    else
    {
        <MudIconButton Href="Profile" Icon="@Icons.Filled.Person" Color="Color.Inherit" />
    }

    
</MudAppBar>
<MudDrawer @bind-Open="@open" Breakpoint="@breakpoint" Elevation="1" Anchor="Anchor.Start" Variant="@DrawerVariant.Temporary" PreserveOpenState="@preserveOpenState">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Furniture Shop</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudPaper Style="background-color:" Width="250px" Class="py-3 mb-4" Elevation="0">
                 <MudNavMenu Margin="Margin.Dense" Color="Color.Warning">
                    <MudNavLink Href="/" Icon="@Icons.Filled.DashboardCustomize">Overview</MudNavLink>
                    <MudNavLink Href="/organization" Icon="@Icons.Filled.Apartment">Organization</MudNavLink>
                <MudNavLink Match="NavLinkMatch.Prefix" Href="/product" Icon="@Icons.Filled.ProductionQuantityLimits">Prducts</MudNavLink>
                <MudNavGroup Icon="@Icons.Filled.Category" Title="Categories">
                        <MudNavLink Href="/">Table</MudNavLink>
                        <MudNavLink Href="/">Dast</MudNavLink>
                </MudNavGroup>
                </MudNavMenu>
            </MudPaper>
        </MudNavMenu>
</MudDrawer>



@code {
    bool open = false;
    bool preserveOpenState = false;
    Breakpoint breakpoint = Breakpoint.Lg;

    void ToggleDrawer()
    {
        open = !open;
    }

    UserView user = new UserView();

    protected override async Task OnInitializedAsync()
    {
        var client = new HttpClient();
        client.BaseAddress = new Uri("https://localhost:7113");

        var message = new HttpRequestMessage(HttpMethod.Get, "/api/profile");
        message.SetBrowserRequestCredentials(BrowserRequestCredentials.Include);

        var profileJson = await (await client.SendAsync(message)).Content.ReadAsStringAsync();
        user = JsonConvert.DeserializeObject<UserView>(profileJson);
    }
}